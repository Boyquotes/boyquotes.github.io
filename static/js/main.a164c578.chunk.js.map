{"version":3,"sources":["assets/img/tree.png","assets/img/arbre2.png","assets/light-logo.png","assets/dark-logo.png","assets/404.svg","assets/img/forest-background.jpeg","assets/img/forest-background-night.jpeg","utils/style/colors.js","utils/style/Atoms.jsx","utils/context/index.jsx","utils/hooks/index.jsx","pages/Home/index.jsx","getWeb3.js","pages/Mint/index.jsx","pages/NFT/index.jsx","pages/Roadmap/index.jsx","pages/Team/index.jsx","pages/About/index.jsx","components/Header/index.jsx","components/Error/index.jsx","App.js","utils/style/GlobalStyle.jsx","index.js"],"names":["module","exports","colors","primary","secondary","backgroundLight","backgroundDark","dark","rotate","keyframes","StyledLink","styled","div","Link","$theme","props","$isFullLink","ThemeContext","createContext","ThemeProvider","children","useState","theme","setTheme","Provider","value","toggleTheme","useTheme","useContext","HomeWrapper","HomerContainer","Home","className","src","arbre2","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","PageTitle","h1","PageSubtitle","h2","Mint","account","setAccount","contract","setContract","isOwner","setIsOwner","inputSetCost","useRef","owner","balanceEth","setBalanceEth","supplyLeaf","setSupplyLeaf","supplyNft","setSupplyNft","pause","setPause","test","setTest","useEffect","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","LeafContract","networks","instance","Contract","abi","address","methods","call","from","isOwn","balanceDappEth","ethBalance","balanceDappLeaf","leafSupply","balanceNft","nftSupply","getPause","p","getTest","t","utils","fromWei","alert","error","on","location","reload","pauseChanged","change","send","testChanged","costChanged","e","preventDefault","current","setCost","width","FormCheck","type","checked","onChange","label","onSubmit","ref","NFT","Roadmap","Team","About","NightModeButton","button","HomeLogo","img","NavContainer","nav","Header","to","LightLogo","DarkLogo","onClick","App","StyledGlobalStyle","createGlobalStyle","isDarkMode","BackgroundNight","Background","GlobalStyle","ReactDOM","render","StrictMode","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.a164c578.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tree.7dfe3353.png\";","module.exports = __webpack_public_path__ + \"static/media/arbre2.7e7a0b4a.png\";","module.exports = __webpack_public_path__ + \"static/media/light-logo.002f32d0.png\";","module.exports = __webpack_public_path__ + \"static/media/dark-logo.002f32d0.png\";","module.exports = __webpack_public_path__ + \"static/media/404.451de7b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/forest-background.c162da0e.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/forest-background-night.1f69a4e6.jpeg\";","const colors = {\n  primary: '#5843E4',\n  secondary: '#8186A0',\n  backgroundLight: '#F9F9FC',\n  backgroundDark: '#4F4C6B',\n  dark: '#2F2E41',\n}\n\nexport default colors\n","import { Link } from 'react-router-dom'\nimport colors from './colors'\nimport styled, { keyframes } from 'styled-components'\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nexport const Loader = styled.div`\n  padding: 10px;\n  border: 6px solid ${colors.primary};\n  border-bottom-color: transparent;\n  border-radius: 22px;\n  animation: ${rotate} 1s infinite linear;\n  height: 0;\n  width: 0;\n`\n\nexport const StyledLink = styled(Link)`\n  padding: 10px 15px;\n  color: ${({ $theme }) => ($theme === 'light' ? '#002230' : '#ffffff')};\n  text-decoration: none;\n  font-size: 18px;\n  text-align: center;\n  ${(props) =>\n    props.$isFullLink &&\n    `color: white; \n    border-radius: 30px; \n    background-color: ${colors.primary};`}\n`\n","import React, { useState, createContext } from 'react'\n\nexport const ThemeContext = createContext()\n\nexport const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light')\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light')\n  }\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n","import { useState, useEffect, useContext } from 'react'\nimport { ThemeContext } from '../context'\n\nexport function useFetch(url) {\n  const [data, setData] = useState({})\n  const [isLoading, setLoading] = useState(true)\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    if (!url) return\n    setLoading(true)\n    async function fetchData() {\n      try {\n        const response = await fetch(url)\n        const data = await response.json()\n        setData(data)\n      } catch (err) {\n        console.log(err)\n        setError(true)\n      } finally {\n        setLoading(false)\n      }\n    }\n    fetchData()\n  }, [url])\n  return { isLoading, data, error }\n}\n\nexport function useTheme() {\n  const { theme, toggleTheme } = useContext(ThemeContext)\n  return { theme, toggleTheme }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport styled from 'styled-components'\nimport colors from '../../utils/style/colors'\nimport { StyledLink } from '../../utils/style/Atoms'\nimport { useTheme } from '../../utils/hooks'\nimport arbre2 from '../../assets/img/arbre2.png'\n\nconst HomeWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nconst HomerContainer = styled.div`\n  margin: 3em;\n  padding: 60px 90px;\n  display: flex;\n  flex-direction: row;\n  max-width: 1400px;\n`\n\nfunction Home() {\n  const { theme } = useTheme()\n\n  return (\n    <HomeWrapper>\n      <HomerContainer theme={theme}>\n      <div className=\"appP2P\">\n        <div>\n          <h1>PLAY 2 PLANT</h1>\n          <h2>The Leaf project</h2>\n          <p>\n            Play 2 Plant est un jeu mobile créé pour contribuer à la reforestation en incitant ses joueurs à faire de l’activité physique. \n            Notre jeu permet à l’utilisateur de gagner de la crypto-monnaie $LEAF et de planter des arbres lorsqu’il marche. Pour jouer, vous devez posséder un des 10.000 NFT.\n          </p>\n        </div>\n        <div>\n            <img src={arbre2} />\n        </div>\n      </div>\n      </HomerContainer>\n    </HomeWrapper>\n  )\n}\n\nexport default Home\n","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport colors from '../../utils/style/colors'\nimport { Loader } from '../../utils/style/Atoms'\nimport { useFetch, useTheme } from '../../utils/hooks'\nimport tree from '../../assets/img/tree.png'\nimport LeafContract from \"../../contracts/LeafDapp.json\";\nimport { Button, Col, Container, Card, FormCheck, Row } from \"react-bootstrap\";\nimport getWeb3 from \"../../getWeb3\";\n\nconst CardsContainer = styled.div`\n  display: grid;\n  gap: 24px;\n  grid-template-rows: 350px 350px;\n  grid-template-columns: repeat(2, 1fr);\n  align-items: center;\n  justify-items: center;\n`\n\nconst PageTitle = styled.h1`\n  font-size: 30px;\n  text-align: center;\n  padding-bottom: 30px;\n  color: ${({ theme }) => (theme === 'light' ? '#000000' : '#ffffff')};\n`\n\nconst PageSubtitle = styled.h2`\n  font-size: 20px;\n  color: ${colors.secondary};\n  font-weight: 300;\n  text-align: center;\n  padding-bottom: 30px;\n  color: ${({ theme }) => (theme === 'light' ? '#000000' : '#ffffff')};\n`\n\nconst LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nfunction Mint() {\n  const { theme } = useTheme()\n\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(null);\n  const [isOwner, setIsOwner] = useState(false);\n\n  const inputWithDrow = useRef();\n  const inputGetPlayer = useRef();\n  const inputWhiteList = useRef();\n  const inputRemoveWhiteList = useRef();\n  const inputSetCost = useRef();\n  const inputBalance = useRef();\n\n  const [owner, setOwner] = useState(\"\");\n  const [balanceEth, setBalanceEth] = useState(0);\n  const [supplyLeaf, setSupplyLeaf] = useState(0);\n  const [supplyNft, setSupplyNft] = useState(0);\n  const [pause, setPause] = useState(false);\n  const [test, setTest] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = LeafContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n          LeafContract.abi,\n          deployedNetwork && deployedNetwork.address\n          // \"0x3e29b9c2a4A633885a19cb249e2dcEf0A5d27A10\"\n        );\n\n        setContract(instance);\n\n        const owner = await instance.methods\n          .owner()\n          .call({ from: accounts[0] });\n        const isOwn = owner == accounts[0];\n\n        setAccount(accounts[0]);\n        setIsOwner(isOwn);\n\n        if (isOwn) {\n          const ethBalance = await instance.methods\n            .balanceDappEth()\n            .call({ from: accounts[0] });\n          const leafSupply = await instance.methods\n            .balanceDappLeaf()\n            .call({ from: accounts[0] });\n          const nftSupply = await instance.methods\n            .balanceNft()\n            .call({ from: accounts[0] });\n\n          const p = await instance.methods\n            .getPause()\n            .call({ from: accounts[0] });\n\n          const t = await instance.methods\n            .getTest()\n            .call({ from: accounts[0] });\n\n          setBalanceEth(web3.utils.fromWei(ethBalance, \"ether\"));\n          setSupplyLeaf(leafSupply);\n          setSupplyNft(nftSupply);\n          setPause(p);\n          setTest(t);\n        }\n\n        // const nftAddr = await instance.methods.nft().call({from: accounts[0]});\n        // console.log(\"ZZZZZZZZZZZZZZZZZZZZZ   \" + nftAddr);\n        // const nft1Uri = await instanceNft.methods.tokenURI(1).call({from: accounts[0]});\n        // setNftJson(await (await fetch(`https://ipfs.io/ipfs/${nft1Uri.substring(7)}`)).json());\n        // console.log(\"ZZZZZZZZZZZZZZZZZZZZZ   \" + nft1Uri);\n\n        // await instance.methods.buyNft().send({from: accounts[0], value: web3.utils.toWei('0.01', 'ether')});\n        // // // await instance.methods.stepToLeafWithoutTimestamp(12000).send({from: accounts[0]});\n        // const player = await instance.methods.getPlayer().call({from: accounts[0]});\n        // console.log(accounts[0]);\n        // console.log(\"player : \" + player);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`\n        );\n\n        console.error(error);\n      }\n    })();\n  }, [owner]);\n\n  useEffect(() => {\n    (async () => {\n      window.ethereum.on(\"accountsChanged\", async function () {\n        window.location.reload(false);\n      });\n    })();\n  }, []);\n\n  ///////////////////////////////////////////////////////////////////////////////////////\n  /// FUNCTIONS\n  ///////////////////////////////////////////////////////////////////////////////////////\n\n  const pauseChanged = async () => {\n    const change = !pause;\n    await contract.methods.setPause(change).send({ from: account });\n    setPause(change);\n  };\n\n  const testChanged = async () => {\n    const change = !test;\n    await contract.methods.setTest(change).send({ from: account });\n    setTest(change);\n  };\n\n  const costChanged = async (e) => {\n    e.preventDefault();\n    let value = inputSetCost.current.value;\n    await contract.methods.setCost(value).send({ from: account });\n  };\n\n  return (\n    <div>\n      <PageTitle theme={theme}>Mint</PageTitle>\n      <PageSubtitle theme={theme}>\n      {isOwner ? (\n          <div>\n            <div>\n              <h4>OWNER : {isOwner && account}</h4>\n            </div>\n\n            <div>\n              <hr width=\"60%\" />\n              <h2>Balances & Supply</h2>\n              <h5>Eth disponible : {balanceEth}</h5>\n              <h5>LEAF supply : {supplyLeaf}</h5>\n              <h5>LNFT supply : {supplyNft}/10000</h5>\n            </div>\n\n            <div>\n              <hr width=\"60%\" />\n              <h2>Changement du Dapp</h2>\n              <FormCheck\n                type=\"switch\"\n                checked={pause}\n                onChange={pauseChanged}\n                label=\"Mettre le Dapp en pause\"\n              />\n              <FormCheck\n                type=\"switch\"\n                checked={test}\n                onChange={testChanged}\n                label=\"Passer en mode test\"\n              />\n\n\n              <form onSubmit={costChanged} className=\"form\">\n                <label>\n                  <input\n                    type=\"text\"\n                    ref={inputSetCost}\n                    className=\"input\"\n                  />\n                </label>\n                <input type=\"submit\" value=\"Changer le Prix de LNFT\" className=\"button\" />\n              </form>\n\n            </div>\n          </div>\n        ) : (\n          <h5>Player : {account}</h5>\n        )}        \n      </PageSubtitle>\n    </div>\n  )\n}\n\nexport default Mint\n","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport colors from '../../utils/style/colors'\nimport { Loader } from '../../utils/style/Atoms'\nimport { useFetch, useTheme } from '../../utils/hooks'\nimport tree from '../../assets/img/tree.png'\n\nconst CardsContainer = styled.div`\n  display: grid;\n  gap: 24px;\n  grid-template-rows: 350px 350px;\n  grid-template-columns: repeat(2, 1fr);\n  align-items: center;\n  justify-items: center;\n`\n\nconst PageTitle = styled.h1`\n  font-size: 30px;\n  text-align: center;\n  padding-bottom: 30px;\n  color: ${({ theme }) => (theme === 'light' ? '#000000' : '#ffffff')};\n`\n\nconst PageSubtitle = styled.h2`\n  font-size: 20px;\n  color: ${colors.secondary};\n  font-weight: 300;\n  text-align: center;\n  padding-bottom: 30px;\n  color: ${({ theme }) => (theme === 'light' ? '#000000' : '#ffffff')};\n`\n\nconst LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nfunction NFT() {\n  const { theme } = useTheme()\n\n  return (\n    <div>\n      <PageTitle theme={theme}>Mon NFT</PageTitle>\n      <PageSubtitle theme={theme}>\n        \n      </PageSubtitle>\n    </div>\n  )\n}\n\nexport default NFT\n","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport colors from '../../utils/style/colors'\nimport { Loader } from '../../utils/style/Atoms'\nimport { useFetch, useTheme } from '../../utils/hooks'\nimport tree from '../../assets/img/tree.png'\n\nconst CardsContainer = styled.div`\n  display: grid;\n  gap: 24px;\n  grid-template-rows: 350px 350px;\n  grid-template-columns: repeat(2, 1fr);\n  align-items: center;\n  justify-items: center;\n`\n\nconst PageTitle = styled.h1`\n  font-size: 30px;\n  text-align: center;\n  padding-bottom: 30px;\n  color: ${({ theme }) => (theme === 'light' ? '#000000' : '#ffffff')};\n`\n\nconst PageSubtitle = styled.h2`\n  font-size: 20px;\n  color: ${colors.secondary};\n  font-weight: 300;\n  text-align: center;\n  padding-bottom: 30px;\n  color: ${({ theme }) => (theme === 'light' ? '#000000' : '#ffffff')};\n`\n\nconst LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nfunction Roadmap() {\n  const { theme } = useTheme()\n\n  return (\n    <div className=\"roadmap\">\n      <PageTitle theme={theme}>ROADMAP</PageTitle>\n      <PageSubtitle theme={theme}>\n            <hr></hr>\n            <h2>Décembre 2021 - Janvier 2022</h2>\n            <h2>POC</h2>\n            <ul>\n                <li>Concept <i>13 décembre 2021</i></li>\n                <li>Business plan</li>\n                <li>White paper</li>\n                <li>NFT</li>\n                <li>DAPP</li>\n                <li>TOKEN</li>\n                <li>POC</li><i>27 janvier 2022</i>\n            </ul>\n            <hr></hr>\n            <h2>Q1/Q2 2022</h2>\n            <h2>LEAF Company</h2>\n            <ul>\n                <li>Communication (Site web/réseaux sociaux/Discord/Twitter) <i>Q1/Q2</i></li>\n                <li>Constitution de la LEAF company <i>Q1/Q2</i></li>\n                <li>Choix/partenariat avec l'association <i>Q1/Q2</i></li>\n            </ul>\n            <hr></hr>\n            <h2>Q3 2022</h2>\n            <h2>Teasing</h2>\n            <ul>\n                <li>Lancement de l'opération marketing</li><i>1 juillet 2022</i>\n                <li>Développements ++ (NFT asso/niveaux/marketplace/rareté)</li><i>Q3</i>\n                <li>Pré ventes</li><i>1 octobre 2022</i>\n            </ul>\n            <hr></hr>\n            <h2>Q4 2022</h2>\n            <h2>MVP</h2>\n            <ul>\n                <li>Teasing lancement du jeu</li><i>Q4 2022</i>\n                <li>Développements ++ (NFT asso/niveaux/marketplace/rareté)</li><i>Q4</i>\n                <li>Ventes publiques 🚀 <i>31 décembre 2022</i></li>\n            </ul>\n            <hr></hr>\n            <h2>Q1 2023</h2>\n            <h2>KICKOFF</h2>\n            <ul>\n                <li>Teasing 2 lancement</li><i>1 janvier 2023</i>\n                <li>Tests/développements</li><i>Q1 2023</i>\n                <li>Lancement du jeu</li><i>21 mars 2023</i>\n            </ul>\n      </PageSubtitle>\n    </div>\n  )\n}\n\nexport default Roadmap\n","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport colors from '../../utils/style/colors'\nimport { Loader } from '../../utils/style/Atoms'\nimport { useFetch, useTheme } from '../../utils/hooks'\nimport tree from '../../assets/img/tree.png'\n\nconst CardsContainer = styled.div`\n  display: grid;\n  gap: 24px;\n  grid-template-rows: 350px 350px;\n  grid-template-columns: repeat(2, 1fr);\n  align-items: center;\n  justify-items: center;\n`\n\nconst PageTitle = styled.h1`\n  font-size: 30px;\n  text-align: center;\n  padding-bottom: 30px;\n  color: ${({ theme }) => (theme === 'light' ? '#000000' : '#ffffff')};\n`\n\nconst PageSubtitle = styled.h2`\n  font-size: 20px;\n  color: ${colors.secondary};\n  font-weight: 300;\n  text-align: center;\n  padding-bottom: 30px;\n  color: ${({ theme }) => (theme === 'light' ? '#000000' : '#ffffff')};\n`\n\nconst LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nfunction Team() {\n  const { theme } = useTheme()\n\n  return (\n    <div>\n      <PageTitle theme={theme}>Team</PageTitle>\n      <PageSubtitle theme={theme}>\n          <div className=\"about\">\n          \n            <div className=\"whiteBox\">\n              <h1>Camille RENOUX</h1>\n              <ul>\n                <li>Gestion de projet</li>\n                <li>Finance</li>\n                <li>Marketing</li>\n                <li>Blockchain</li>\n              </ul>\n            </div>\n            <div className=\"greenBox\">\n              <h1>NicolasVILLA</h1>\n              <ul>\n                <li>Dev PHP/JS WEB/LINUX</li>\n                <li>CMS & Frameworks PHP</li>\n                <li>Blockchain</li>\n              </ul>\n            </div>\n            <div className=\"whiteBox\">\n              <h1>Aram ARAKELYAN</h1>\n              <ul>\n                <li>Dev Adnroid Java/Kotlin</li>\n                <li>Application</li>\n                <li>Blockchain</li>\n              </ul>\n            </div>\n\n            <div className=\"greenBox\">\n              <h1>Valentin SIMONY</h1>\n              <ul>\n                <li>Entreprenariat</li>\n                <li>Gestion de projet</li>\n                <li>Communication</li>\n                <li>Blockchain</li>\n              </ul>\n            </div>\n            <div className=\"whiteBox\">\n              <h1>Sylvain Rey</h1>\n              <ul>\n                <li>Dev Android</li>\n                <li>Frameworks</li>\n                <li>Blockchain</li>\n              </ul>\n            </div>\n            <div className=\"greenBox\">\n              <h1>Anas BELBAZ</h1>\n              <ul>\n                <li>Ingénieur logiciel</li>\n                <li>Application web</li>\n                <li>NFT</li>\n                <li>Blockchain</li>\n              </ul>\n            </div>\n            \n          </div>        \n      </PageSubtitle>\n    </div>\n  )\n}\n\nexport default Team\n","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport colors from '../../utils/style/colors'\nimport { Loader } from '../../utils/style/Atoms'\nimport { useFetch, useTheme } from '../../utils/hooks'\nimport tree from '../../assets/img/tree.png'\n\nconst PageTitle = styled.h1`\n  font-size: 30px;\n  text-align: center;\n  padding-bottom: 30px;\n  color: ${({ theme }) => (theme === 'light' ? '#000000' : '#ffffff')};\n`\n\nconst PageSubtitle = styled.h2`\n  font-size: 20px;\n  color: ${colors.secondary};\n  font-weight: 300;\n  text-align: center;\n  padding-bottom: 30px;\n  color: ${({ theme }) => (theme === 'light' ? '#000000' : '#ffffff')};\n`\n\nconst LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nfunction About() {\n  const { theme } = useTheme()\n\n  return (\n    <div>\n      <PageTitle theme={theme}>About</PageTitle>\n      <PageSubtitle theme={theme}>  \n        <div className=\"about\">\n          <div className=\"whiteBox\">\n            <h1>MOVE-TO-EARN</h1>\n            <p>\n              Votre arbre génère de la cryptomonnaie $LEAF lorsque vous marchez.\n            </p>\n          </div>\n          <div className=\"greenBox\">\n            <h1>PLAY-TO-PLANT</h1>\n            <p>\n              Une partie de vos efforts permet de créer des $LEAF reversés pour la reforestation.\n            </p>\n          </div>\n          <div className=\"whiteBox\">\n            <h1>SCORING</h1>\n            <p>\n              Suivez votre classement sur le LEADERBOARD et consultez le nombre d’arbres vous avez planté.\n            </p>\n          </div>\n\n          <div className=\"greenBox\">\n            <h1>LEVEL</h1>\n            <p>\n              Relevez les défis du contrat de marche et votre arbre produira de plus en plus de $LEAF.\n            </p>\n          </div>\n          <div className=\"whiteBox\">\n            <h1>MARKETPLACE</h1>\n            <p>\n              Usez de stratégie et achetez des Ressources au bon moment pour booster la production de  $LEAF de votre arbre.\n            </p>\n          </div>\n          <div className=\"greenBox\">\n            <h1>NFT</h1>\n            <p>\n              Vous êtes assidu ?<br />\n              Votre arbre va produire un fruit qui donnera naissance à un nouvel arbre.\n            </p>\n          </div>\n        </div>\n      </PageSubtitle>\n    </div>\n  )\n}\n\nexport default About\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { StyledLink } from '../../utils/style/Atoms'\nimport LightLogo from '../../assets/light-logo.png'\nimport DarkLogo from '../../assets/dark-logo.png'\nimport { useTheme } from '../../utils/hooks'\n\nimport colors from '../../utils/style/colors'\n\nconst NightModeButton = styled.button`\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  color: ${colors.secondary};\n  padding-top: 30px;\n`\n\nconst HomeLogo = styled.img`\n  height: 60px;\n`\n\nconst NavContainer = styled.nav`\n  padding: 30px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n\nfunction Header() {\n  const { toggleTheme, theme } = useTheme()\n\n  return (\n    <NavContainer>\n      <Link to=\"/\">\n        <HomeLogo src={theme === 'light' ? LightLogo : DarkLogo } />\n      </Link>\n      <div>\n        <StyledLink $theme={theme} to=\"/\">\n          Accueil\n        </StyledLink>\n        <StyledLink $theme={theme} to=\"/mint\">\n          Mint\n        </StyledLink>\n        <StyledLink $theme={theme} to=\"/NFT\">\n          Mon NFT\n        </StyledLink>\n        <StyledLink $theme={theme} to=\"/roadmap\">\n          Roadmap\n        </StyledLink>\n        <StyledLink $theme={theme} to=\"/team\">\n          Team\n        </StyledLink>\n        <StyledLink $theme={theme} to=\"/about\">\n          About\n        </StyledLink>\n      </div>\n      <NightModeButton onClick={() => toggleTheme()}>\n        Changer de mode : {theme === 'light' ? '☀️' : '🌙'}\n      </NightModeButton>\n    </NavContainer>\n  )\n}\n\nexport default Header\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport styled from 'styled-components'\nimport colors from '../../utils/style/colors'\nimport { useTheme } from '../../utils/hooks'\nimport ErrorIllustration from '../../assets/404.svg'\n\nconst ErrorWrapper = styled.div`\n  margin: 30px;\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) =>\n    theme === 'light' ? colors.backgroundLight : colors.backgroundDark};\n  align-items: center;\n`\n\nconst ErrorTitle = styled.h1`\n  color: ${({ theme }) => (theme === 'light' ? '#000000' : '#ffffff')};\n  font-weight: 300;\n`\n\nconst ErrorSubtitle = styled.h2`\n  color: ${({ theme }) => (theme === 'light' ? colors.secondary : '#ffffff')};\n  font-weight: 300;\n`\n\nconst Illustration = styled.img`\n  max-width: 800px;\n`\n\nfunction Error() {\n  const { theme } = useTheme()\n\n  return (\n    <ErrorWrapper theme={theme}>\n      <ErrorTitle theme={theme}>Oups...</ErrorTitle>\n      <Illustration src={ErrorIllustration} />\n      <ErrorSubtitle theme={theme}>\n        Il semblerait que la page que vous cherchez n’existe pas\n      </ErrorSubtitle>\n    </ErrorWrapper>\n  )\n}\n\nexport default Error\n","import React, { useEffect, useState, useRef } from \"react\";\nimport LeafContract from \"./contracts/LeafDapp.json\";\nimport getWeb3 from \"./getWeb3\";\nimport { Button, Col, Container, Card, FormCheck, Row } from \"react-bootstrap\";\nimport Header from './components/Header'\nimport \"./App.css\";\n\nfunction App() {\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(null);\n  const [isOwner, setIsOwner] = useState(false);\n\n  const inputWithDrow = useRef();\n  const inputGetPlayer = useRef();\n  const inputWhiteList = useRef();\n  const inputRemoveWhiteList = useRef();\n  const inputSetCost = useRef();\n  const inputBalance = useRef();\n\n  const [owner, setOwner] = useState(\"\");\n  const [balanceEth, setBalanceEth] = useState(0);\n  const [supplyLeaf, setSupplyLeaf] = useState(0);\n  const [supplyNft, setSupplyNft] = useState(0);\n  const [pause, setPause] = useState(false);\n  const [test, setTest] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = LeafContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n          LeafContract.abi,\n          deployedNetwork && deployedNetwork.address\n          // \"0x3e29b9c2a4A633885a19cb249e2dcEf0A5d27A10\"\n        );\n\n        setContract(instance);\n\n        const owner = await instance.methods\n          .owner()\n          .call({ from: accounts[0] });\n        const isOwn = owner == accounts[0];\n\n        setAccount(accounts[0]);\n        setIsOwner(isOwn);\n\n        if (isOwn) {\n          const ethBalance = await instance.methods\n            .balanceDappEth()\n            .call({ from: accounts[0] });\n          const leafSupply = await instance.methods\n            .balanceDappLeaf()\n            .call({ from: accounts[0] });\n          const nftSupply = await instance.methods\n            .balanceNft()\n            .call({ from: accounts[0] });\n\n          const p = await instance.methods\n            .getPause()\n            .call({ from: accounts[0] });\n\n          const t = await instance.methods\n            .getTest()\n            .call({ from: accounts[0] });\n\n          setBalanceEth(web3.utils.fromWei(ethBalance, \"ether\"));\n          setSupplyLeaf(leafSupply);\n          setSupplyNft(nftSupply);\n          setPause(p);\n          setTest(t);\n        }\n\n        // const nftAddr = await instance.methods.nft().call({from: accounts[0]});\n        // console.log(\"ZZZZZZZZZZZZZZZZZZZZZ   \" + nftAddr);\n        // const nft1Uri = await instanceNft.methods.tokenURI(1).call({from: accounts[0]});\n        // setNftJson(await (await fetch(`https://ipfs.io/ipfs/${nft1Uri.substring(7)}`)).json());\n        // console.log(\"ZZZZZZZZZZZZZZZZZZZZZ   \" + nft1Uri);\n\n        // await instance.methods.buyNft().send({from: accounts[0], value: web3.utils.toWei('0.01', 'ether')});\n        // // // await instance.methods.stepToLeafWithoutTimestamp(12000).send({from: accounts[0]});\n        // const player = await instance.methods.getPlayer().call({from: accounts[0]});\n        // console.log(accounts[0]);\n        // console.log(\"player : \" + player);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`\n        );\n\n        console.error(error);\n      }\n    })();\n  }, [owner]);\n\n  useEffect(() => {\n    (async () => {\n      window.ethereum.on(\"accountsChanged\", async function () {\n        window.location.reload(false);\n      });\n    })();\n  }, []);\n\n  ///////////////////////////////////////////////////////////////////////////////////////\n  /// FUNCTIONS\n  ///////////////////////////////////////////////////////////////////////////////////////\n\n  const pauseChanged = async () => {\n    const change = !pause;\n    await contract.methods.setPause(change).send({ from: account });\n    setPause(change);\n  };\n\n  const testChanged = async () => {\n    const change = !test;\n    await contract.methods.setTest(change).send({ from: account });\n    setTest(change);\n  };\n\n  const costChanged = async (e) => {\n    e.preventDefault();\n    let value = inputSetCost.current.value;\n    await contract.methods.setCost(value).send({ from: account });\n  };\n\n  // {/* <img src={nftJson.image && `https://ipfs.io/ipfs/${nftJson.image.substring(7)}`} alt=\"img\" /> */}\n  return (\n    <Container>\n      <div className=\"appP2P\">\n        <div>\n          <h1>PLAY 2 PLANT</h1>\n          <h2>The Leaf project</h2>\n          <p>\n            Play 2 Plant est un jeu mobile créé pour contribuer à la reforestation en incitant ses joueurs à faire de l’activité physique. \n            Notre jeu permet à l’utilisateur de gagner de la crypto-monnaie $LEAF et de planter des arbres lorsqu’il marche. Pour jouer, vous devez posséder un des 10.000 NFT.\n          </p>\n        </div>\n        <div>\n          {isOwner ? (\n          <div>\n            <div>\n              <h4>OWNER : {isOwner && account}</h4>\n            </div>\n\n            <div>\n              <hr width=\"60%\" />\n              <h2>Balances & Supply</h2>\n              <h5>Eth disponible : {balanceEth}</h5>\n              <h5>LEAF supply : {supplyLeaf}</h5>\n              <h5>LNFT supply : {supplyNft}/10000</h5>\n            </div>\n\n            <div>\n              <hr width=\"60%\" />\n              <h2>Changement du Dapp</h2>\n              <FormCheck\n                type=\"switch\"\n                checked={pause}\n                onChange={pauseChanged}\n                label=\"Mettre le Dapp en pause\"\n              />\n              <FormCheck\n                type=\"switch\"\n                checked={test}\n                onChange={testChanged}\n                label=\"Passer en mode test\"\n              />\n\n\n              <form onSubmit={costChanged} className=\"form\">\n                <label>\n                  <input\n                    type=\"text\"\n                    ref={inputSetCost}\n                    className=\"input\"\n                  />\n                </label>\n                <input type=\"submit\" value=\"Changer le Prix de LNFT\" className=\"button\" />\n              </form>\n\n            </div>\n          </div>\n        ) : (\n          <h5>Player : {account}</h5>\n        )}\n        </div>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components'\nimport { useTheme } from '../hooks'\nimport Background from '../../assets/img/forest-background.jpeg';\nimport BackgroundNight from '../../assets/img/forest-background-night.jpeg';\n\nconst StyledGlobalStyle = createGlobalStyle`\n    * {\n      font-family: 'Trebuchet MS', Helvetica, sans-serif;\n    }\n\n    a {\n      text-decoration: none;\n    }\n\n    body {\n      background: ${(props) =>\n        props.isDarkMode ? `url(\"${BackgroundNight}\")` : `url(\"${Background}\")`};\n      background-color: ${(props) =>\n          props.isDarkMode ? '#2F2E41' : 'white'};\n        margin: 0;\n        background-size: cover;\n        background-repeat: no-repeat;\n    }\n    #root nav{\n      background-color:${(props) =>\n        props.isDarkMode ? 'grey' : 'white'};\n    }\n    #root nav button{\n      color:${(props) =>\n        props.isDarkMode ? '#ffffff' : '#002230'};\n    }\n    .roadmap {\n      background-color:${(props) =>\n        props.isDarkMode ? '#002230' : 'white'};\n    }\n    `\n\nfunction GlobalStyle() {\n  const { theme } = useTheme()\n\n  return <StyledGlobalStyle isDarkMode={theme === 'dark'} />\n}\n\nexport default GlobalStyle\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\n\nimport './index.css'\nimport Home from './pages/Home'\nimport Mint from './pages/Mint'\nimport NFT from './pages/NFT'\nimport Roadmap from './pages/Roadmap'\nimport Team from './pages/Team'\nimport About from './pages/About'\nimport Header from './components/Header'\nimport Error from './components/Error'\nimport App from './App';\n\nimport GlobalStyle from './utils/style/GlobalStyle'\nimport { ThemeProvider } from './utils/context'\n//import 'bootstrap/dist/css/bootstrap.min.css'\n\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n//\t<App />,\n//\t document.getElementById('root')\n//);\n  <React.StrictMode>\n    <Router>\n      <ThemeProvider>\n        <GlobalStyle />\n          <Header />\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/mint\" element={<Mint />} />\n            <Route path=\"/NFT\" element={<NFT />} />\n            <Route path=\"/roadmap\" element={<Roadmap />} />\n            <Route path=\"/team\" element={<Team />} />\n            <Route path=\"/about\" element={<About />} />\n          </Routes>\n      </ThemeProvider>\n    </Router>\n  </React.StrictMode>,\n\t document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}